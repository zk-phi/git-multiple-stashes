#! /usr/bin/env emacs --script

(cd (or (locate-dominating-file "." ".git") (error "Not under a git repo.")))

(unless (file-exists-p "./.git/refs/stashes")
  (make-directory "./.git/refs/stashes" t))

(unless (file-exists-p "./.git/logs/refs/stashes")
  (make-directory "./.git/logs/refs/stashes" t))

(defvar all-stashes
  (if (file-exists-p "./.git/stash_switcher")
      (with-temp-buffer
        (insert-file-contents "./.git/stash_switcher")
        (read (buffer-string)))
    '("stash" nil)))

(defvar active-stash (car all-stashes))
(defvar inactive-stashes (cdr all-stashes))

(defvar command (pop command-line-args-left))
(defvar stash-name (pop command-line-args-left))

(unless command
  (error "Command not specified."))

(cond ((string= command "list")
       (princ (format "* %s" (mapconcat 'identity all-stashes "\n"))))
      ((string= command "create")
       (when (member stash-name all-stashes)
         (error "Stash list %s already exists." stash-name))
       (push stash-name inactive-stashes)
       (let ((reflog (format "./.git/refs/stashes/%s" stash-name))
             (ref (format "./.git/logs/refs/stashes/%s" stash-name)))
         (when (file-exists-p reflog) (delete-file reflog))
         (when (file-exists-p ref) (delete-file ref)))
       (message "Stash list %s created." stash-name))
      ((string= command "delete")
       (when (string= stash-name active-stash)
         (error "Stash list %s is checked out." stash-name))
       (unless (member stash-name inactive-stashes)
         (error "Stash list %s not found." stash-name))
       (setq inactive-stashes (remove stash-name inactive-stashes))
       (message "Stash list %s deleted." stash-name))
      ((string= command "show")
       (unless (member stash-name all-stashes)
         (error "Stash list %s not found." stash-name))
       (let ((reflog (if (string= stash-name active-stash) "refs/stash"
                       (format "refs/stashes/%s" stash-name))))
         (if (file-exists-p (format "./.git/%s" reflog))
             (princ (shell-command-to-string (format "git reflog %s" reflog)))
           (message "No commits are stashed."))))
      ((string= command "switch")
       (when (string= stash-name active-stash)
         (error "Stash list %s is already checked out." stash-name))
       (unless (member stash-name inactive-stashes)
         (error "Stash list %s not found." stash-name))
       ;; save current stash list
       (when (file-exists-p "./.git/refs/stash")
         (rename-file "./.git/logs/refs/stash" (format "./.git/logs/refs/stashes/%s" active-stash))
         (rename-file "./.git/refs/stash" (format "./.git/refs/stashes/%s" active-stash)))
       ;; restore saved stash list
       (let ((reflog (format "./.git/logs/refs/stashes/%s" stash-name)))
         (when (file-exists-p reflog)
           (rename-file reflog "./.git/logs/refs/stash")))
       (let ((ref (format "./.git/refs/stashes/%s" stash-name)))
         (when (file-exists-p ref)
           (rename-file ref "./.git/refs/stash")))
       (setq inactive-stashes (cons active-stash (remove stash-name inactive-stashes)))
       (setq active-stash stash-name))
      (t
       (error "Command %s not found." command)))

(with-temp-buffer
  (insert (prin1-to-string (cons active-stash inactive-stashes)))
  (let ((message-log-max nil))
    (write-region (point-min) (point-max) "./.git/stash_switcher")))
